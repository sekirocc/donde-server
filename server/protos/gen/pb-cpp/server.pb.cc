// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace sekirocc {
namespace face_service {
PROTOBUF_CONSTEXPR Rect::Rect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectDefaultTypeInternal() {}
  union {
    Rect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectDefaultTypeInternal _Rect_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Size::Size(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SizeDefaultTypeInternal _Size_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR FaceFeature::FaceFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceFeatureDefaultTypeInternal() {}
  union {
    FaceFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceFeatureDefaultTypeInternal _FaceFeature_default_instance_;
PROTOBUF_CONSTEXPR FaceRectangle::FaceRectangle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rectangle_)*/nullptr
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceRectangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceRectangleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceRectangleDefaultTypeInternal() {}
  union {
    FaceRectangle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceRectangleDefaultTypeInternal _FaceRectangle_default_instance_;
PROTOBUF_CONSTEXPR DetectionRequest::DetectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionRequestDefaultTypeInternal() {}
  union {
    DetectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
PROTOBUF_CONSTEXPR DetectionResponse::DetectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.face_rects_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionResponseDefaultTypeInternal() {}
  union {
    DetectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionResponseDefaultTypeInternal _DetectionResponse_default_instance_;
PROTOBUF_CONSTEXPR ExtractionRequest::ExtractionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtractionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtractionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtractionRequestDefaultTypeInternal() {}
  union {
    ExtractionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtractionRequestDefaultTypeInternal _ExtractionRequest_default_instance_;
PROTOBUF_CONSTEXPR ExtractionResponse::ExtractionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.face_rects_)*/{}
  , /*decltype(_impl_.face_features_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtractionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtractionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtractionResponseDefaultTypeInternal() {}
  union {
    ExtractionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtractionResponseDefaultTypeInternal _ExtractionResponse_default_instance_;
}  // namespace face_service
}  // namespace sekirocc
}  // namespace com
static ::_pb::Metadata file_level_metadata_server_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const uint32_t TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Rect, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Rect, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Point, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Size, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Size, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Image, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Image, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, _impl_.feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceRectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceRectangle, _impl_.rectangle_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceRectangle, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceRectangle, _impl_.confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::DetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::DetectionRequest, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::DetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::DetectionResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::DetectionResponse, _impl_.face_rects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ExtractionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ExtractionRequest, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ExtractionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ExtractionResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ExtractionResponse, _impl_.face_rects_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ExtractionResponse, _impl_.face_features_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::sekirocc::face_service::Rect)},
  { 8, -1, -1, sizeof(::com::sekirocc::face_service::Point)},
  { 16, -1, -1, sizeof(::com::sekirocc::face_service::Size)},
  { 24, -1, -1, sizeof(::com::sekirocc::face_service::Image)},
  { 32, -1, -1, sizeof(::com::sekirocc::face_service::FaceFeature)},
  { 41, -1, -1, sizeof(::com::sekirocc::face_service::FaceRectangle)},
  { 50, -1, -1, sizeof(::com::sekirocc::face_service::DetectionRequest)},
  { 57, -1, -1, sizeof(::com::sekirocc::face_service::DetectionResponse)},
  { 65, -1, -1, sizeof(::com::sekirocc::face_service::ExtractionRequest)},
  { 72, -1, -1, sizeof(::com::sekirocc::face_service::ExtractionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::sekirocc::face_service::_Rect_default_instance_._instance,
  &::com::sekirocc::face_service::_Point_default_instance_._instance,
  &::com::sekirocc::face_service::_Size_default_instance_._instance,
  &::com::sekirocc::face_service::_Image_default_instance_._instance,
  &::com::sekirocc::face_service::_FaceFeature_default_instance_._instance,
  &::com::sekirocc::face_service::_FaceRectangle_default_instance_._instance,
  &::com::sekirocc::face_service::_DetectionRequest_default_instance_._instance,
  &::com::sekirocc::face_service::_DetectionResponse_default_instance_._instance,
  &::com::sekirocc::face_service::_ExtractionRequest_default_instance_._instance,
  &::com::sekirocc::face_service::_ExtractionResponse_default_instance_._instance,
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\022\031com.sekirocc.face_servic"
  "e\032\034google/api/annotations.proto\"f\n\004Rect\022"
  "/\n\005point\030\001 \001(\0132 .com.sekirocc.face_servi"
  "ce.Point\022-\n\004size\030\002 \001(\0132\037.com.sekirocc.fa"
  "ce_service.Size\"\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t\n\001y"
  "\030\002 \001(\005\"%\n\004Size\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030"
  "\002 \001(\005\"M\n\005Image\0226\n\006format\030\001 \001(\0162&.com.sek"
  "irocc.face_service.ImageFormat\022\014\n\004data\030\002"
  " \001(\014\">\n\013FaceFeature\022\017\n\007version\030\001 \001(\005\022\r\n\005"
  "model\030\002 \001(\t\022\017\n\007feature\030\003 \003(\002\"h\n\rFaceRect"
  "angle\0222\n\trectangle\030\002 \001(\0132\037.com.sekirocc."
  "face_service.Rect\022\017\n\007quality\030\003 \001(\002\022\022\n\nco"
  "nfidence\030\004 \001(\002\"C\n\020DetectionRequest\022/\n\005im"
  "age\030\001 \001(\0132 .com.sekirocc.face_service.Im"
  "age\"\206\001\n\021DetectionResponse\0223\n\004code\030\001 \001(\0162"
  "%.com.sekirocc.face_service.ResultCode\022<"
  "\n\nface_rects\030\002 \003(\0132(.com.sekirocc.face_s"
  "ervice.FaceRectangle\"D\n\021ExtractionReques"
  "t\022/\n\005image\030\001 \001(\0132 .com.sekirocc.face_ser"
  "vice.Image\"\306\001\n\022ExtractionResponse\0223\n\004cod"
  "e\030\001 \001(\0162%.com.sekirocc.face_service.Resu"
  "ltCode\022<\n\nface_rects\030\002 \003(\0132(.com.sekiroc"
  "c.face_service.FaceRectangle\022=\n\rface_fea"
  "tures\030\003 \003(\0132&.com.sekirocc.face_service."
  "FaceFeature*f\n\nResultCode\022\006\n\002OK\020\000\022\021\n\014SER"
  "VER_ERROR\020\221N\022\021\n\014CLIENT_ERROR\020\365N\022\023\n\016FACE_"
  "NOT_FOUND\020\366N\"\005\010\001\020\220N\"\006\010\222N\020\364N\"\006\010\367N\020\330O*\?\n\013I"
  "mageFormat\022\021\n\rIMAGE_UNKNOWN\020\000\022\016\n\nIMAGE_J"
  "PEG\020\001\022\r\n\tIMAGE_PNG\020\0022\230\002\n\013FaceService\022|\n\006"
  "Detect\022+.com.sekirocc.face_service.Detec"
  "tionRequest\032,.com.sekirocc.face_service."
  "DetectionResponse\"\027\202\323\344\223\002\021\"\014/detect_face:"
  "\001*\022\212\001\n\016ExtractFeature\022,.com.sekirocc.fac"
  "e_service.ExtractionRequest\032-.com.sekiro"
  "cc.face_service.ExtractionResponse\"\033\202\323\344\223"
  "\002\025\"\020/extract_feature:\001*B;Z9github.com/se"
  "kirocc/face-recognition-service/face_ser"
  "viceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_server_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::_pbi::once_flag descriptor_table_server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_2eproto = {
    false, false, 1492, descriptor_table_protodef_server_2eproto,
    "server.proto",
    &descriptor_table_server_2eproto_once, descriptor_table_server_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_server_2eproto::offsets,
    file_level_metadata_server_2eproto, file_level_enum_descriptors_server_2eproto,
    file_level_service_descriptors_server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_2eproto_getter() {
  return &descriptor_table_server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_2eproto(&descriptor_table_server_2eproto);
namespace com {
namespace sekirocc {
namespace face_service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[0];
}
bool ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10101:
    case 10102:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[1];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Rect::_Internal {
 public:
  static const ::com::sekirocc::face_service::Point& point(const Rect* msg);
  static const ::com::sekirocc::face_service::Size& size(const Rect* msg);
};

const ::com::sekirocc::face_service::Point&
Rect::_Internal::point(const Rect* msg) {
  return *msg->_impl_.point_;
}
const ::com::sekirocc::face_service::Size&
Rect::_Internal::size(const Rect* msg) {
  return *msg->_impl_.size_;
}
Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::com::sekirocc::face_service::Point(*from._impl_.point_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::com::sekirocc::face_service::Size(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Rect)
}

inline void Rect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Rect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.point_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void Rect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Rect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.face_service.Size size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Rect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Point point = 1;
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  // .com.sekirocc.face_service.Size size = 2;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Rect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Point point = 1;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  // .com.sekirocc.face_service.Size size = 2;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rect::GetClassData() const { return &_class_data_; }


void Rect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rect*>(&to_msg);
  auto& from = static_cast<const Rect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Rect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::com::sekirocc::face_service::Point::MergeFrom(
        from._internal_point());
  }
  if (from._internal_has_size()) {
    _this->_internal_mutable_size()->::com::sekirocc::face_service::Size::MergeFrom(
        from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, _impl_.size_)
      + sizeof(Rect::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Rect, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[0]);
}

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[1]);
}

// ===================================================================

class Size::_Internal {
 public:
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Size* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Size)
}

inline void Size::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Size)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Size::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Size::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Size)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Size::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Size)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Size)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Size::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Size::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Size::GetClassData() const { return &_class_data_; }


void Size::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Size*>(&to_msg);
  auto& from = static_cast<const Size&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Size)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, _impl_.height_)
      + sizeof(Size::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Size, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[2]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.format_ = from._impl_.format_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Image)
}

inline void Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.format_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.ImageFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::com::sekirocc::face_service::ImageFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.ImageFormat format = 1;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .com.sekirocc.face_service.ImageFormat format = 1;
  if (this->_internal_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }


void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.format_, other->_impl_.format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[3]);
}

// ===================================================================

class FaceFeature::_Internal {
 public:
};

FaceFeature::FaceFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.FaceFeature)
}
FaceFeature::FaceFeature(const FaceFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){from._impl_.feature_}
    , decltype(_impl_.model_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.FaceFeature)
}

inline void FaceFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){arena}
    , decltype(_impl_.model_){}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceFeature::~FaceFeature() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.FaceFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.~RepeatedField();
  _impl_.model_.Destroy();
}

void FaceFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.FaceFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_.Clear();
  _impl_.model_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.face_service.FaceFeature.model"));
        } else
          goto handle_unusual;
        continue;
      // repeated float feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_feature(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.FaceFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.face_service.FaceFeature.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  // repeated float feature = 3;
  if (this->_internal_feature_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.FaceFeature)
  return target;
}

size_t FaceFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.FaceFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceFeature::GetClassData() const { return &_class_data_; }


void FaceFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceFeature*>(&to_msg);
  auto& from = static_cast<const FaceFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.FaceFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_.MergeFrom(from._impl_.feature_);
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceFeature::CopyFrom(const FaceFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.FaceFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeature::IsInitialized() const {
  return true;
}

void FaceFeature::InternalSwap(FaceFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[4]);
}

// ===================================================================

class FaceRectangle::_Internal {
 public:
  static const ::com::sekirocc::face_service::Rect& rectangle(const FaceRectangle* msg);
};

const ::com::sekirocc::face_service::Rect&
FaceRectangle::_Internal::rectangle(const FaceRectangle* msg) {
  return *msg->_impl_.rectangle_;
}
FaceRectangle::FaceRectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.FaceRectangle)
}
FaceRectangle::FaceRectangle(const FaceRectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceRectangle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rectangle_){nullptr}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rectangle()) {
    _this->_impl_.rectangle_ = new ::com::sekirocc::face_service::Rect(*from._impl_.rectangle_);
  }
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.FaceRectangle)
}

inline void FaceRectangle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rectangle_){nullptr}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FaceRectangle::~FaceRectangle() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.FaceRectangle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceRectangle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rectangle_;
}

void FaceRectangle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceRectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.FaceRectangle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rectangle_ != nullptr) {
    delete _impl_.rectangle_;
  }
  _impl_.rectangle_ = nullptr;
  ::memset(&_impl_.quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceRectangle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.Rect rectangle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rectangle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceRectangle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.FaceRectangle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Rect rectangle = 2;
  if (this->_internal_has_rectangle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rectangle(this),
        _Internal::rectangle(this).GetCachedSize(), target, stream);
  }

  // float quality = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_quality(), target);
  }

  // float confidence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.FaceRectangle)
  return target;
}

size_t FaceRectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.FaceRectangle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Rect rectangle = 2;
  if (this->_internal_has_rectangle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rectangle_);
  }

  // float quality = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 1 + 4;
  }

  // float confidence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceRectangle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceRectangle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceRectangle::GetClassData() const { return &_class_data_; }


void FaceRectangle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceRectangle*>(&to_msg);
  auto& from = static_cast<const FaceRectangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.FaceRectangle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rectangle()) {
    _this->_internal_mutable_rectangle()->::com::sekirocc::face_service::Rect::MergeFrom(
        from._internal_rectangle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = from._internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceRectangle::CopyFrom(const FaceRectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.FaceRectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRectangle::IsInitialized() const {
  return true;
}

void FaceRectangle::InternalSwap(FaceRectangle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceRectangle, _impl_.confidence_)
      + sizeof(FaceRectangle::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(FaceRectangle, _impl_.rectangle_)>(
          reinterpret_cast<char*>(&_impl_.rectangle_),
          reinterpret_cast<char*>(&other->_impl_.rectangle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRectangle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[5]);
}

// ===================================================================

class DetectionRequest::_Internal {
 public:
  static const ::com::sekirocc::face_service::Image& image(const DetectionRequest* msg);
};

const ::com::sekirocc::face_service::Image&
DetectionRequest::_Internal::image(const DetectionRequest* msg) {
  return *msg->_impl_.image_;
}
DetectionRequest::DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.DetectionRequest)
}
DetectionRequest::DetectionRequest(const DetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::com::sekirocc::face_service::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.DetectionRequest)
}

inline void DetectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectionRequest::~DetectionRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.DetectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void DetectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.DetectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.DetectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Image image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.DetectionRequest)
  return target;
}

size_t DetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.DetectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionRequest::GetClassData() const { return &_class_data_; }


void DetectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectionRequest*>(&to_msg);
  auto& from = static_cast<const DetectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::com::sekirocc::face_service::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionRequest::CopyFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionRequest::IsInitialized() const {
  return true;
}

void DetectionRequest::InternalSwap(DetectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[6]);
}

// ===================================================================

class DetectionResponse::_Internal {
 public:
};

DetectionResponse::DetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.DetectionResponse)
}
DetectionResponse::DetectionResponse(const DetectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){from._impl_.face_rects_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.DetectionResponse)
}

inline void DetectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectionResponse::~DetectionResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.DetectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.face_rects_.~RepeatedPtrField();
}

void DetectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.DetectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.face_rects_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::face_service::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.face_service.FaceRectangle face_rects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.DetectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated .com.sekirocc.face_service.FaceRectangle face_rects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_face_rects_size()); i < n; i++) {
    const auto& repfield = this->_internal_face_rects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.DetectionResponse)
  return target;
}

size_t DetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.DetectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.FaceRectangle face_rects = 2;
  total_size += 1UL * this->_internal_face_rects_size();
  for (const auto& msg : this->_impl_.face_rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.face_service.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionResponse::GetClassData() const { return &_class_data_; }


void DetectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectionResponse*>(&to_msg);
  auto& from = static_cast<const DetectionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.DetectionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.face_rects_.MergeFrom(from._impl_.face_rects_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionResponse::CopyFrom(const DetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.DetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionResponse::IsInitialized() const {
  return true;
}

void DetectionResponse::InternalSwap(DetectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.face_rects_.InternalSwap(&other->_impl_.face_rects_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[7]);
}

// ===================================================================

class ExtractionRequest::_Internal {
 public:
  static const ::com::sekirocc::face_service::Image& image(const ExtractionRequest* msg);
};

const ::com::sekirocc::face_service::Image&
ExtractionRequest::_Internal::image(const ExtractionRequest* msg) {
  return *msg->_impl_.image_;
}
ExtractionRequest::ExtractionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.ExtractionRequest)
}
ExtractionRequest::ExtractionRequest(const ExtractionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtractionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::com::sekirocc::face_service::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.ExtractionRequest)
}

inline void ExtractionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtractionRequest::~ExtractionRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.ExtractionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtractionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ExtractionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtractionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.ExtractionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtractionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtractionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.ExtractionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Image image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.ExtractionRequest)
  return target;
}

size_t ExtractionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.ExtractionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtractionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtractionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtractionRequest::GetClassData() const { return &_class_data_; }


void ExtractionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtractionRequest*>(&to_msg);
  auto& from = static_cast<const ExtractionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.ExtractionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::com::sekirocc::face_service::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtractionRequest::CopyFrom(const ExtractionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.ExtractionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractionRequest::IsInitialized() const {
  return true;
}

void ExtractionRequest::InternalSwap(ExtractionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[8]);
}

// ===================================================================

class ExtractionResponse::_Internal {
 public:
};

ExtractionResponse::ExtractionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.ExtractionResponse)
}
ExtractionResponse::ExtractionResponse(const ExtractionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtractionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){from._impl_.face_rects_}
    , decltype(_impl_.face_features_){from._impl_.face_features_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.ExtractionResponse)
}

inline void ExtractionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){arena}
    , decltype(_impl_.face_features_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtractionResponse::~ExtractionResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.ExtractionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtractionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.face_rects_.~RepeatedPtrField();
  _impl_.face_features_.~RepeatedPtrField();
}

void ExtractionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtractionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.ExtractionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.face_rects_.Clear();
  _impl_.face_features_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtractionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::face_service::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.face_service.FaceRectangle face_rects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.face_service.FaceFeature face_features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtractionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.ExtractionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated .com.sekirocc.face_service.FaceRectangle face_rects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_face_rects_size()); i < n; i++) {
    const auto& repfield = this->_internal_face_rects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.sekirocc.face_service.FaceFeature face_features = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_face_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_face_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.ExtractionResponse)
  return target;
}

size_t ExtractionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.ExtractionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.FaceRectangle face_rects = 2;
  total_size += 1UL * this->_internal_face_rects_size();
  for (const auto& msg : this->_impl_.face_rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.sekirocc.face_service.FaceFeature face_features = 3;
  total_size += 1UL * this->_internal_face_features_size();
  for (const auto& msg : this->_impl_.face_features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.face_service.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtractionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtractionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtractionResponse::GetClassData() const { return &_class_data_; }


void ExtractionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtractionResponse*>(&to_msg);
  auto& from = static_cast<const ExtractionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.ExtractionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.face_rects_.MergeFrom(from._impl_.face_rects_);
  _this->_impl_.face_features_.MergeFrom(from._impl_.face_features_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtractionResponse::CopyFrom(const ExtractionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.ExtractionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractionResponse::IsInitialized() const {
  return true;
}

void ExtractionResponse::InternalSwap(ExtractionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.face_rects_.InternalSwap(&other->_impl_.face_rects_);
  _impl_.face_features_.InternalSwap(&other->_impl_.face_features_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace face_service
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Rect*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Point*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Size*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Image*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::FaceFeature*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::FaceFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::FaceFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::FaceRectangle*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::FaceRectangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::FaceRectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::DetectionRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::DetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::DetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::DetectionResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::DetectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::DetectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::ExtractionRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::ExtractionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::ExtractionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::ExtractionResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::face_service::ExtractionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::ExtractionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
