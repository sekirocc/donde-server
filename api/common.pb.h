// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace com {
namespace sekirocc {
namespace common {
class DBItem;
struct DBItemDefaultTypeInternal;
extern DBItemDefaultTypeInternal _DBItem_default_instance_;
class FaceFeature;
struct FaceFeatureDefaultTypeInternal;
extern FaceFeatureDefaultTypeInternal _FaceFeature_default_instance_;
class FaceRectangle;
struct FaceRectangleDefaultTypeInternal;
extern FaceRectangleDefaultTypeInternal _FaceRectangle_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rect;
struct RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Size;
struct SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
}  // namespace common
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::sekirocc::common::DBItem* Arena::CreateMaybeMessage<::com::sekirocc::common::DBItem>(Arena*);
template<> ::com::sekirocc::common::FaceFeature* Arena::CreateMaybeMessage<::com::sekirocc::common::FaceFeature>(Arena*);
template<> ::com::sekirocc::common::FaceRectangle* Arena::CreateMaybeMessage<::com::sekirocc::common::FaceRectangle>(Arena*);
template<> ::com::sekirocc::common::Image* Arena::CreateMaybeMessage<::com::sekirocc::common::Image>(Arena*);
template<> ::com::sekirocc::common::Point* Arena::CreateMaybeMessage<::com::sekirocc::common::Point>(Arena*);
template<> ::com::sekirocc::common::Rect* Arena::CreateMaybeMessage<::com::sekirocc::common::Rect>(Arena*);
template<> ::com::sekirocc::common::Size* Arena::CreateMaybeMessage<::com::sekirocc::common::Size>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace sekirocc {
namespace common {

enum ResultCode : int {
  OK = 0,
  SERVER_ERROR = 10001,
  CLIENT_ERROR = 10101,
  FACE_NOT_FOUND = 10102,
  ResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResultCode_IsValid(int value);
constexpr ResultCode ResultCode_MIN = OK;
constexpr ResultCode ResultCode_MAX = FACE_NOT_FOUND;
constexpr int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_descriptor();
template<typename T>
inline const std::string& ResultCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResultCode_descriptor(), enum_t_value);
}
inline bool ResultCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
enum ImageFormat : int {
  IMAGE_UNKNOWN = 0,
  IMAGE_JPEG = 1,
  IMAGE_PNG = 2,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = IMAGE_UNKNOWN;
constexpr ImageFormat ImageFormat_MAX = IMAGE_PNG;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
// ===================================================================

class Rect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.Rect) */ {
 public:
  inline Rect() : Rect(nullptr) {}
  ~Rect() override;
  explicit PROTOBUF_CONSTEXPR Rect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rect& from) {
    Rect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.Rect";
  }
  protected:
  explicit Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .com.sekirocc.common.Point point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::com::sekirocc::common::Point& point() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::Point* release_point();
  ::com::sekirocc::common::Point* mutable_point();
  void set_allocated_point(::com::sekirocc::common::Point* point);
  private:
  const ::com::sekirocc::common::Point& _internal_point() const;
  ::com::sekirocc::common::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::com::sekirocc::common::Point* point);
  ::com::sekirocc::common::Point* unsafe_arena_release_point();

  // .com.sekirocc.common.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::com::sekirocc::common::Size& size() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::Size* release_size();
  ::com::sekirocc::common::Size* mutable_size();
  void set_allocated_size(::com::sekirocc::common::Size* size);
  private:
  const ::com::sekirocc::common::Size& _internal_size() const;
  ::com::sekirocc::common::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::com::sekirocc::common::Size* size);
  ::com::sekirocc::common::Size* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.Rect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::common::Point* point_;
    ::com::sekirocc::common::Size* size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Size final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.Size) */ {
 public:
  inline Size() : Size(nullptr) {}
  ~Size() override;
  explicit PROTOBUF_CONSTEXPR Size(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Size(const Size& from);
  Size(Size&& from) noexcept
    : Size() {
    *this = ::std::move(from);
  }

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size& operator=(Size&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Size& default_instance() {
    return *internal_default_instance();
  }
  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Size& a, Size& b) {
    a.Swap(&b);
  }
  inline void Swap(Size* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Size>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Size& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Size& from) {
    Size::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.Size";
  }
  protected:
  explicit Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.Size)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Image& from) {
    Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFormatFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .com.sekirocc.common.ImageFormat format = 1;
  void clear_format();
  ::com::sekirocc::common::ImageFormat format() const;
  void set_format(::com::sekirocc::common::ImageFormat value);
  private:
  ::com::sekirocc::common::ImageFormat _internal_format() const;
  void _internal_set_format(::com::sekirocc::common::ImageFormat value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FaceFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.FaceFeature) */ {
 public:
  inline FaceFeature() : FaceFeature(nullptr) {}
  ~FaceFeature() override;
  explicit PROTOBUF_CONSTEXPR FaceFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FaceFeature(const FaceFeature& from);
  FaceFeature(FaceFeature&& from) noexcept
    : FaceFeature() {
    *this = ::std::move(from);
  }

  inline FaceFeature& operator=(const FaceFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceFeature& operator=(FaceFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaceFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaceFeature* internal_default_instance() {
    return reinterpret_cast<const FaceFeature*>(
               &_FaceFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FaceFeature& a, FaceFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaceFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FaceFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FaceFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FaceFeature& from) {
    FaceFeature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.FaceFeature";
  }
  protected:
  explicit FaceFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kBlobFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // bytes blob = 3;
  void clear_blob();
  const std::string& blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob();
  PROTOBUF_NODISCARD std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.FaceFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FaceRectangle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.FaceRectangle) */ {
 public:
  inline FaceRectangle() : FaceRectangle(nullptr) {}
  ~FaceRectangle() override;
  explicit PROTOBUF_CONSTEXPR FaceRectangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FaceRectangle(const FaceRectangle& from);
  FaceRectangle(FaceRectangle&& from) noexcept
    : FaceRectangle() {
    *this = ::std::move(from);
  }

  inline FaceRectangle& operator=(const FaceRectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceRectangle& operator=(FaceRectangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaceRectangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaceRectangle* internal_default_instance() {
    return reinterpret_cast<const FaceRectangle*>(
               &_FaceRectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FaceRectangle& a, FaceRectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceRectangle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceRectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaceRectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FaceRectangle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FaceRectangle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FaceRectangle& from) {
    FaceRectangle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceRectangle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.FaceRectangle";
  }
  protected:
  explicit FaceRectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectangleFieldNumber = 2,
    kQualityFieldNumber = 3,
    kConfidenceFieldNumber = 4,
  };
  // .com.sekirocc.common.Rect rectangle = 2;
  bool has_rectangle() const;
  private:
  bool _internal_has_rectangle() const;
  public:
  void clear_rectangle();
  const ::com::sekirocc::common::Rect& rectangle() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::Rect* release_rectangle();
  ::com::sekirocc::common::Rect* mutable_rectangle();
  void set_allocated_rectangle(::com::sekirocc::common::Rect* rectangle);
  private:
  const ::com::sekirocc::common::Rect& _internal_rectangle() const;
  ::com::sekirocc::common::Rect* _internal_mutable_rectangle();
  public:
  void unsafe_arena_set_allocated_rectangle(
      ::com::sekirocc::common::Rect* rectangle);
  ::com::sekirocc::common::Rect* unsafe_arena_release_rectangle();

  // float quality = 3;
  void clear_quality();
  float quality() const;
  void set_quality(float value);
  private:
  float _internal_quality() const;
  void _internal_set_quality(float value);
  public:

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.FaceRectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::common::Rect* rectangle_;
    float quality_;
    float confidence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DBItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.common.DBItem) */ {
 public:
  inline DBItem() : DBItem(nullptr) {}
  ~DBItem() override;
  explicit PROTOBUF_CONSTEXPR DBItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBItem(const DBItem& from);
  DBItem(DBItem&& from) noexcept
    : DBItem() {
    *this = ::std::move(from);
  }

  inline DBItem& operator=(const DBItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBItem& operator=(DBItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBItem* internal_default_instance() {
    return reinterpret_cast<const DBItem*>(
               &_DBItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DBItem& a, DBItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBItem& from) {
    DBItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.common.DBItem";
  }
  protected:
  explicit DBItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCapacityFieldNumber = 4,
    kUsedFieldNumber = 5,
  };
  // string db_id = 1;
  void clear_db_id();
  const std::string& db_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db_id();
  PROTOBUF_NODISCARD std::string* release_db_id();
  void set_allocated_db_id(std::string* db_id);
  private:
  const std::string& _internal_db_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_id(const std::string& value);
  std::string* _internal_mutable_db_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 capacity = 4;
  void clear_capacity();
  int64_t capacity() const;
  void set_capacity(int64_t value);
  private:
  int64_t _internal_capacity() const;
  void _internal_set_capacity(int64_t value);
  public:

  // int64 used = 5;
  void clear_used();
  int64_t used() const;
  void set_used(int64_t value);
  private:
  int64_t _internal_used() const;
  void _internal_set_used(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.common.DBItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    int64_t capacity_;
    int64_t used_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rect

// .com.sekirocc.common.Point point = 1;
inline bool Rect::_internal_has_point() const {
  return this != internal_default_instance() && _impl_.point_ != nullptr;
}
inline bool Rect::has_point() const {
  return _internal_has_point();
}
inline void Rect::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
inline const ::com::sekirocc::common::Point& Rect::_internal_point() const {
  const ::com::sekirocc::common::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::Point&>(
      ::com::sekirocc::common::_Point_default_instance_);
}
inline const ::com::sekirocc::common::Point& Rect::point() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Rect.point)
  return _internal_point();
}
inline void Rect::unsafe_arena_set_allocated_point(
    ::com::sekirocc::common::Point* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.common.Rect.point)
}
inline ::com::sekirocc::common::Point* Rect::release_point() {
  
  ::com::sekirocc::common::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::Point* Rect::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.Rect.point)
  
  ::com::sekirocc::common::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::Point* Rect::_internal_mutable_point() {
  
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::Point>(GetArenaForAllocation());
    _impl_.point_ = p;
  }
  return _impl_.point_;
}
inline ::com::sekirocc::common::Point* Rect::mutable_point() {
  ::com::sekirocc::common::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.Rect.point)
  return _msg;
}
inline void Rect::set_allocated_point(::com::sekirocc::common::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.point_ = point;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.Rect.point)
}

// .com.sekirocc.common.Size size = 2;
inline bool Rect::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool Rect::has_size() const {
  return _internal_has_size();
}
inline void Rect::clear_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
}
inline const ::com::sekirocc::common::Size& Rect::_internal_size() const {
  const ::com::sekirocc::common::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::Size&>(
      ::com::sekirocc::common::_Size_default_instance_);
}
inline const ::com::sekirocc::common::Size& Rect::size() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Rect.size)
  return _internal_size();
}
inline void Rect::unsafe_arena_set_allocated_size(
    ::com::sekirocc::common::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.common.Rect.size)
}
inline ::com::sekirocc::common::Size* Rect::release_size() {
  
  ::com::sekirocc::common::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::Size* Rect::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.Rect.size)
  
  ::com::sekirocc::common::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::Size* Rect::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::Size>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::com::sekirocc::common::Size* Rect::mutable_size() {
  ::com::sekirocc::common::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.Rect.size)
  return _msg;
}
inline void Rect::set_allocated_size(::com::sekirocc::common::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.Rect.size)
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Point::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Point::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.Point.y)
}

// -------------------------------------------------------------------

// Size

// int32 width = 1;
inline void Size::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Size::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Size::width() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Size.width)
  return _internal_width();
}
inline void Size::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Size::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.Size.width)
}

// int32 height = 2;
inline void Size::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Size::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Size::height() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Size.height)
  return _internal_height();
}
inline void Size::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Size::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.Size.height)
}

// -------------------------------------------------------------------

// Image

// .com.sekirocc.common.ImageFormat format = 1;
inline void Image::clear_format() {
  _impl_.format_ = 0;
}
inline ::com::sekirocc::common::ImageFormat Image::_internal_format() const {
  return static_cast< ::com::sekirocc::common::ImageFormat >(_impl_.format_);
}
inline ::com::sekirocc::common::ImageFormat Image::format() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Image.format)
  return _internal_format();
}
inline void Image::_internal_set_format(::com::sekirocc::common::ImageFormat value) {
  
  _impl_.format_ = value;
}
inline void Image::set_format(::com::sekirocc::common::ImageFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.Image.format)
}

// bytes data = 2;
inline void Image::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.Image.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.common.Image.data)
}
inline std::string* Image::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.Image.data)
  return _s;
}
inline const std::string& Image::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.Image.data)
  return _impl_.data_.Release();
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.Image.data)
}

// -------------------------------------------------------------------

// FaceFeature

// int32 version = 1;
inline void FaceFeature::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t FaceFeature::_internal_version() const {
  return _impl_.version_;
}
inline int32_t FaceFeature::version() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.FaceFeature.version)
  return _internal_version();
}
inline void FaceFeature::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void FaceFeature::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.FaceFeature.version)
}

// string model = 2;
inline void FaceFeature::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& FaceFeature::model() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.FaceFeature.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FaceFeature::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.common.FaceFeature.model)
}
inline std::string* FaceFeature::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.FaceFeature.model)
  return _s;
}
inline const std::string& FaceFeature::_internal_model() const {
  return _impl_.model_.Get();
}
inline void FaceFeature::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* FaceFeature::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* FaceFeature::release_model() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.FaceFeature.model)
  return _impl_.model_.Release();
}
inline void FaceFeature::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.FaceFeature.model)
}

// bytes blob = 3;
inline void FaceFeature::clear_blob() {
  _impl_.blob_.ClearToEmpty();
}
inline const std::string& FaceFeature::blob() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.FaceFeature.blob)
  return _internal_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FaceFeature::set_blob(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blob_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.common.FaceFeature.blob)
}
inline std::string* FaceFeature::mutable_blob() {
  std::string* _s = _internal_mutable_blob();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.FaceFeature.blob)
  return _s;
}
inline const std::string& FaceFeature::_internal_blob() const {
  return _impl_.blob_.Get();
}
inline void FaceFeature::_internal_set_blob(const std::string& value) {
  
  _impl_.blob_.Set(value, GetArenaForAllocation());
}
inline std::string* FaceFeature::_internal_mutable_blob() {
  
  return _impl_.blob_.Mutable(GetArenaForAllocation());
}
inline std::string* FaceFeature::release_blob() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.FaceFeature.blob)
  return _impl_.blob_.Release();
}
inline void FaceFeature::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    
  } else {
    
  }
  _impl_.blob_.SetAllocated(blob, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blob_.IsDefault()) {
    _impl_.blob_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.FaceFeature.blob)
}

// -------------------------------------------------------------------

// FaceRectangle

// .com.sekirocc.common.Rect rectangle = 2;
inline bool FaceRectangle::_internal_has_rectangle() const {
  return this != internal_default_instance() && _impl_.rectangle_ != nullptr;
}
inline bool FaceRectangle::has_rectangle() const {
  return _internal_has_rectangle();
}
inline void FaceRectangle::clear_rectangle() {
  if (GetArenaForAllocation() == nullptr && _impl_.rectangle_ != nullptr) {
    delete _impl_.rectangle_;
  }
  _impl_.rectangle_ = nullptr;
}
inline const ::com::sekirocc::common::Rect& FaceRectangle::_internal_rectangle() const {
  const ::com::sekirocc::common::Rect* p = _impl_.rectangle_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::Rect&>(
      ::com::sekirocc::common::_Rect_default_instance_);
}
inline const ::com::sekirocc::common::Rect& FaceRectangle::rectangle() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.FaceRectangle.rectangle)
  return _internal_rectangle();
}
inline void FaceRectangle::unsafe_arena_set_allocated_rectangle(
    ::com::sekirocc::common::Rect* rectangle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rectangle_);
  }
  _impl_.rectangle_ = rectangle;
  if (rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.common.FaceRectangle.rectangle)
}
inline ::com::sekirocc::common::Rect* FaceRectangle::release_rectangle() {
  
  ::com::sekirocc::common::Rect* temp = _impl_.rectangle_;
  _impl_.rectangle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::Rect* FaceRectangle::unsafe_arena_release_rectangle() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.FaceRectangle.rectangle)
  
  ::com::sekirocc::common::Rect* temp = _impl_.rectangle_;
  _impl_.rectangle_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::Rect* FaceRectangle::_internal_mutable_rectangle() {
  
  if (_impl_.rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::Rect>(GetArenaForAllocation());
    _impl_.rectangle_ = p;
  }
  return _impl_.rectangle_;
}
inline ::com::sekirocc::common::Rect* FaceRectangle::mutable_rectangle() {
  ::com::sekirocc::common::Rect* _msg = _internal_mutable_rectangle();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.FaceRectangle.rectangle)
  return _msg;
}
inline void FaceRectangle::set_allocated_rectangle(::com::sekirocc::common::Rect* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rectangle_;
  }
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rectangle);
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.FaceRectangle.rectangle)
}

// float quality = 3;
inline void FaceRectangle::clear_quality() {
  _impl_.quality_ = 0;
}
inline float FaceRectangle::_internal_quality() const {
  return _impl_.quality_;
}
inline float FaceRectangle::quality() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.FaceRectangle.quality)
  return _internal_quality();
}
inline void FaceRectangle::_internal_set_quality(float value) {
  
  _impl_.quality_ = value;
}
inline void FaceRectangle::set_quality(float value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.FaceRectangle.quality)
}

// float confidence = 4;
inline void FaceRectangle::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float FaceRectangle::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float FaceRectangle::confidence() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.FaceRectangle.confidence)
  return _internal_confidence();
}
inline void FaceRectangle::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void FaceRectangle::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.FaceRectangle.confidence)
}

// -------------------------------------------------------------------

// DBItem

// string db_id = 1;
inline void DBItem::clear_db_id() {
  _impl_.db_id_.ClearToEmpty();
}
inline const std::string& DBItem::db_id() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.DBItem.db_id)
  return _internal_db_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBItem::set_db_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.common.DBItem.db_id)
}
inline std::string* DBItem::mutable_db_id() {
  std::string* _s = _internal_mutable_db_id();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.DBItem.db_id)
  return _s;
}
inline const std::string& DBItem::_internal_db_id() const {
  return _impl_.db_id_.Get();
}
inline void DBItem::_internal_set_db_id(const std::string& value) {
  
  _impl_.db_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DBItem::_internal_mutable_db_id() {
  
  return _impl_.db_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DBItem::release_db_id() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.DBItem.db_id)
  return _impl_.db_id_.Release();
}
inline void DBItem::set_allocated_db_id(std::string* db_id) {
  if (db_id != nullptr) {
    
  } else {
    
  }
  _impl_.db_id_.SetAllocated(db_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_id_.IsDefault()) {
    _impl_.db_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.DBItem.db_id)
}

// string name = 2;
inline void DBItem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DBItem::name() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.DBItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.common.DBItem.name)
}
inline std::string* DBItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.DBItem.name)
  return _s;
}
inline const std::string& DBItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DBItem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DBItem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DBItem::release_name() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.DBItem.name)
  return _impl_.name_.Release();
}
inline void DBItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.DBItem.name)
}

// string description = 3;
inline void DBItem::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DBItem::description() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.DBItem.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBItem::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.common.DBItem.description)
}
inline std::string* DBItem::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.common.DBItem.description)
  return _s;
}
inline const std::string& DBItem::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DBItem::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DBItem::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DBItem::release_description() {
  // @@protoc_insertion_point(field_release:com.sekirocc.common.DBItem.description)
  return _impl_.description_.Release();
}
inline void DBItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.common.DBItem.description)
}

// int64 capacity = 4;
inline void DBItem::clear_capacity() {
  _impl_.capacity_ = int64_t{0};
}
inline int64_t DBItem::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int64_t DBItem::capacity() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.DBItem.capacity)
  return _internal_capacity();
}
inline void DBItem::_internal_set_capacity(int64_t value) {
  
  _impl_.capacity_ = value;
}
inline void DBItem::set_capacity(int64_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.DBItem.capacity)
}

// int64 used = 5;
inline void DBItem::clear_used() {
  _impl_.used_ = int64_t{0};
}
inline int64_t DBItem::_internal_used() const {
  return _impl_.used_;
}
inline int64_t DBItem::used() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.common.DBItem.used)
  return _internal_used();
}
inline void DBItem::_internal_set_used(int64_t value) {
  
  _impl_.used_ = value;
}
inline void DBItem::set_used(int64_t value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.common.DBItem.used)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace sekirocc
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::sekirocc::common::ResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::sekirocc::common::ResultCode>() {
  return ::com::sekirocc::common::ResultCode_descriptor();
}
template <> struct is_proto_enum< ::com::sekirocc::common::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::sekirocc::common::ImageFormat>() {
  return ::com::sekirocc::common::ImageFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
