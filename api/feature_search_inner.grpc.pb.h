// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: feature_search_inner.proto
#ifndef GRPC_feature_5fsearch_5finner_2eproto__INCLUDED
#define GRPC_feature_5fsearch_5finner_2eproto__INCLUDED

#include "feature_search_inner.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace com {
namespace sekirocc {
namespace feature_search {
namespace inner {

// feature search service
class FeatureSearchWorker final {
 public:
  static constexpr char const* service_full_name() {
    return "com.sekirocc.feature_search.inner.FeatureSearchWorker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>> AsyncGetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>>(AsyncGetSystemInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>> PrepareAsyncGetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>>(PrepareAsyncGetSystemInfoRaw(context, request, cq));
    }
    // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
    // search etc.) must be called once.
    virtual ::grpc::Status ServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>> AsyncServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>>(AsyncServeDBShardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>> PrepareAsyncServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>>(PrepareAsyncServeDBShardsRaw(context, request, cq));
    }
    // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
    // search etc.) must be called once.
    virtual ::grpc::Status CloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>> AsyncCloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>>(AsyncCloseDBShardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>> PrepareAsyncCloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>>(PrepareAsyncCloseDBShardsRaw(context, request, cq));
    }
    // trigger train index job, for maintaince
    virtual ::grpc::Status TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::TrainIndexResponse>> AsyncTrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::TrainIndexResponse>>(AsyncTrainIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::TrainIndexResponse>> PrepareAsyncTrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::TrainIndexResponse>>(PrepareAsyncTrainIndexRaw(context, request, cq));
    }
    // add feature to db
    virtual ::grpc::Status BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>> AsyncBatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>>(AsyncBatchAddFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>> PrepareAsyncBatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>>(PrepareAsyncBatchAddFeaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>> AsyncBatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>>(AsyncBatchDeleteFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>> PrepareAsyncBatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>>(PrepareAsyncBatchDeleteFeaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>> AsyncSearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>>(AsyncSearchFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>> PrepareAsyncSearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>>(PrepareAsyncSearchFeatureRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
      // search etc.) must be called once.
      virtual void ServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
      // search etc.) must be called once.
      virtual void CloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // trigger train index job, for maintaince
      virtual void TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // add feature to db
      virtual void BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* AsyncGetSystemInfoRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* PrepareAsyncGetSystemInfoRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* AsyncServeDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* PrepareAsyncServeDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* AsyncCloseDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* PrepareAsyncCloseDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* AsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* PrepareAsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* AsyncBatchAddFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* PrepareAsyncBatchAddFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* AsyncBatchDeleteFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* PrepareAsyncBatchDeleteFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* AsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* PrepareAsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>> AsyncGetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>>(AsyncGetSystemInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>> PrepareAsyncGetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>>(PrepareAsyncGetSystemInfoRaw(context, request, cq));
    }
    ::grpc::Status ServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>> AsyncServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>>(AsyncServeDBShardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>> PrepareAsyncServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>>(PrepareAsyncServeDBShardsRaw(context, request, cq));
    }
    ::grpc::Status CloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>> AsyncCloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>>(AsyncCloseDBShardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>> PrepareAsyncCloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>>(PrepareAsyncCloseDBShardsRaw(context, request, cq));
    }
    ::grpc::Status TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>> AsyncTrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>>(AsyncTrainIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>> PrepareAsyncTrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>>(PrepareAsyncTrainIndexRaw(context, request, cq));
    }
    ::grpc::Status BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>> AsyncBatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>>(AsyncBatchAddFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>> PrepareAsyncBatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>>(PrepareAsyncBatchAddFeaturesRaw(context, request, cq));
    }
    ::grpc::Status BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>> AsyncBatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>>(AsyncBatchDeleteFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>> PrepareAsyncBatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>>(PrepareAsyncBatchDeleteFeaturesRaw(context, request, cq));
    }
    ::grpc::Status SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>> AsyncSearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>>(AsyncSearchFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>> PrepareAsyncSearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>>(PrepareAsyncSearchFeatureRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response, std::function<void(::grpc::Status)>) override;
      void ServeDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, std::function<void(::grpc::Status)>) override;
      void TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response, std::function<void(::grpc::Status)>) override;
      void BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* AsyncGetSystemInfoRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* PrepareAsyncGetSystemInfoRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* AsyncServeDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* PrepareAsyncServeDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* AsyncCloseDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* PrepareAsyncCloseDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* AsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* PrepareAsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* AsyncBatchAddFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* PrepareAsyncBatchAddFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* AsyncBatchDeleteFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* PrepareAsyncBatchDeleteFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* AsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* PrepareAsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSystemInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ServeDBShards_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDBShards_;
    const ::grpc::internal::RpcMethod rpcmethod_TrainIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchAddFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchDeleteFeatures_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchFeature_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSystemInfo(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response);
    // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
    // search etc.) must be called once.
    virtual ::grpc::Status ServeDBShards(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response);
    // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
    // search etc.) must be called once.
    virtual ::grpc::Status CloseDBShards(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response);
    // trigger train index job, for maintaince
    virtual ::grpc::Status TrainIndex(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response);
    // add feature to db
    virtual ::grpc::Status BatchAddFeatures(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response);
    virtual ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response);
    virtual ::grpc::Status SearchFeature(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSystemInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSystemInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSystemInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemInfo(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSystemInfo(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServeDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServeDBShards() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServeDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServeDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServeDBShards(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDBShards() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CloseDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDBShards(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TrainIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TrainIndex() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TrainIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainIndex(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrainIndex(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchAddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchAddFeatures() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BatchAddFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAddFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchAddFeatures(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchDeleteFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchDeleteFeatures() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_BatchDeleteFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchDeleteFeatures(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchFeature() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SearchFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFeature(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchFeature(::grpc::ServerContext* context, ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSystemInfo<WithAsyncMethod_ServeDBShards<WithAsyncMethod_CloseDBShards<WithAsyncMethod_TrainIndex<WithAsyncMethod_BatchAddFeatures<WithAsyncMethod_BatchDeleteFeatures<WithAsyncMethod_SearchFeature<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSystemInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSystemInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response) { return this->GetSystemInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetSystemInfo(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSystemInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemInfo(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSystemInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServeDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServeDBShards() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::ServeDBShardsRequest, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* request, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* response) { return this->ServeDBShards(context, request, response); }));}
    void SetMessageAllocatorFor_ServeDBShards(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::ServeDBShardsRequest, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::ServeDBShardsRequest, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServeDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServeDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServeDBShards(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseDBShards() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::CloseDBShardsRequest, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* request, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* response) { return this->CloseDBShards(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDBShards(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::CloseDBShardsRequest, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::CloseDBShardsRequest, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseDBShards(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TrainIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TrainIndex() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) { return this->TrainIndex(context, request, response); }));}
    void SetMessageAllocatorFor_TrainIndex(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TrainIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainIndex(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TrainIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchAddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchAddFeatures() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response) { return this->BatchAddFeatures(context, request, response); }));}
    void SetMessageAllocatorFor_BatchAddFeatures(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchAddFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAddFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchAddFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchDeleteFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchDeleteFeatures() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response) { return this->BatchDeleteFeatures(context, request, response); }));}
    void SetMessageAllocatorFor_BatchDeleteFeatures(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchDeleteFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchDeleteFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchFeature() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) { return this->SearchFeature(context, request, response); }));}
    void SetMessageAllocatorFor_SearchFeature(
        ::grpc::MessageAllocator< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFeature(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchFeature(
      ::grpc::CallbackServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSystemInfo<WithCallbackMethod_ServeDBShards<WithCallbackMethod_CloseDBShards<WithCallbackMethod_TrainIndex<WithCallbackMethod_BatchAddFeatures<WithCallbackMethod_BatchDeleteFeatures<WithCallbackMethod_SearchFeature<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSystemInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSystemInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSystemInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemInfo(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServeDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServeDBShards() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServeDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServeDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDBShards() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CloseDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TrainIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TrainIndex() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TrainIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainIndex(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchAddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchAddFeatures() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BatchAddFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAddFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchDeleteFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchDeleteFeatures() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_BatchDeleteFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchFeature() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SearchFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFeature(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSystemInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSystemInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSystemInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemInfo(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSystemInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServeDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServeDBShards() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServeDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServeDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServeDBShards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDBShards() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CloseDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDBShards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TrainIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TrainIndex() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TrainIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainIndex(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrainIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchAddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchAddFeatures() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BatchAddFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAddFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchAddFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchDeleteFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchDeleteFeatures() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_BatchDeleteFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchDeleteFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchFeature() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SearchFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFeature(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSystemInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSystemInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSystemInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSystemInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSystemInfo(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSystemInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServeDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServeDBShards() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServeDBShards(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServeDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServeDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServeDBShards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseDBShards() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDBShards(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseDBShards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TrainIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TrainIndex() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TrainIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_TrainIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainIndex(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TrainIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchAddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchAddFeatures() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchAddFeatures(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchAddFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAddFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchAddFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchDeleteFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchDeleteFeatures() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchDeleteFeatures(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchDeleteFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchDeleteFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchFeature() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchFeature(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchFeature(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchFeature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSystemInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSystemInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* streamer) {
                       return this->StreamedGetSystemInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSystemInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSystemInfo(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* /*request*/, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSystemInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest,::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServeDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServeDBShards() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::ServeDBShardsRequest, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::ServeDBShardsRequest, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* streamer) {
                       return this->StreamedServeDBShards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServeDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServeDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::ServeDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::ServeDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServeDBShards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::ServeDBShardsRequest,::com::sekirocc::feature_search::inner::ServeDBShardsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDBShards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDBShards() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::CloseDBShardsRequest, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::CloseDBShardsRequest, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* streamer) {
                       return this->StreamedCloseDBShards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseDBShards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDBShards(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::CloseDBShardsRequest* /*request*/, ::com::sekirocc::feature_search::inner::CloseDBShardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDBShards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::CloseDBShardsRequest,::com::sekirocc::feature_search::inner::CloseDBShardsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TrainIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TrainIndex() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse>* streamer) {
                       return this->StreamedTrainIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TrainIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TrainIndex(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* /*request*/, ::com::sekirocc::feature_search::inner::TrainIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrainIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::TrainIndexRequest,::com::sekirocc::feature_search::inner::TrainIndexResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchAddFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchAddFeatures() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* streamer) {
                       return this->StreamedBatchAddFeatures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchAddFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchAddFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchAddFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest,::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchDeleteFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchDeleteFeatures() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* streamer) {
                       return this->StreamedBatchDeleteFeatures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchDeleteFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchDeleteFeatures(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* /*request*/, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchDeleteFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest,::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchFeature() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* streamer) {
                       return this->StreamedSearchFeature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchFeature(::grpc::ServerContext* /*context*/, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* /*request*/, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::sekirocc::feature_search::inner::SearchFeatureRequest,::com::sekirocc::feature_search::inner::SearchFeatureResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSystemInfo<WithStreamedUnaryMethod_ServeDBShards<WithStreamedUnaryMethod_CloseDBShards<WithStreamedUnaryMethod_TrainIndex<WithStreamedUnaryMethod_BatchAddFeatures<WithStreamedUnaryMethod_BatchDeleteFeatures<WithStreamedUnaryMethod_SearchFeature<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSystemInfo<WithStreamedUnaryMethod_ServeDBShards<WithStreamedUnaryMethod_CloseDBShards<WithStreamedUnaryMethod_TrainIndex<WithStreamedUnaryMethod_BatchAddFeatures<WithStreamedUnaryMethod_BatchDeleteFeatures<WithStreamedUnaryMethod_SearchFeature<Service > > > > > > > StreamedService;
};

}  // namespace inner
}  // namespace feature_search
}  // namespace sekirocc
}  // namespace com


#endif  // GRPC_feature_5fsearch_5finner_2eproto__INCLUDED
