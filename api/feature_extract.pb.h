// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_feature_5fextract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_feature_5fextract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_feature_5fextract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_feature_5fextract_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_feature_5fextract_2eproto;
namespace com {
namespace sekirocc {
namespace feature_extract {
class CompareRequest;
struct CompareRequestDefaultTypeInternal;
extern CompareRequestDefaultTypeInternal _CompareRequest_default_instance_;
class CompareResponse;
struct CompareResponseDefaultTypeInternal;
extern CompareResponseDefaultTypeInternal _CompareResponse_default_instance_;
class DetectionRequest;
struct DetectionRequestDefaultTypeInternal;
extern DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
class DetectionResponse;
struct DetectionResponseDefaultTypeInternal;
extern DetectionResponseDefaultTypeInternal _DetectionResponse_default_instance_;
class ExtractionRequest;
struct ExtractionRequestDefaultTypeInternal;
extern ExtractionRequestDefaultTypeInternal _ExtractionRequest_default_instance_;
class ExtractionResponse;
struct ExtractionResponseDefaultTypeInternal;
extern ExtractionResponseDefaultTypeInternal _ExtractionResponse_default_instance_;
}  // namespace feature_extract
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::sekirocc::feature_extract::CompareRequest* Arena::CreateMaybeMessage<::com::sekirocc::feature_extract::CompareRequest>(Arena*);
template<> ::com::sekirocc::feature_extract::CompareResponse* Arena::CreateMaybeMessage<::com::sekirocc::feature_extract::CompareResponse>(Arena*);
template<> ::com::sekirocc::feature_extract::DetectionRequest* Arena::CreateMaybeMessage<::com::sekirocc::feature_extract::DetectionRequest>(Arena*);
template<> ::com::sekirocc::feature_extract::DetectionResponse* Arena::CreateMaybeMessage<::com::sekirocc::feature_extract::DetectionResponse>(Arena*);
template<> ::com::sekirocc::feature_extract::ExtractionRequest* Arena::CreateMaybeMessage<::com::sekirocc::feature_extract::ExtractionRequest>(Arena*);
template<> ::com::sekirocc::feature_extract::ExtractionResponse* Arena::CreateMaybeMessage<::com::sekirocc::feature_extract::ExtractionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace sekirocc {
namespace feature_extract {

// ===================================================================

class DetectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.feature_extract.DetectionRequest) */ {
 public:
  inline DetectionRequest() : DetectionRequest(nullptr) {}
  ~DetectionRequest() override;
  explicit PROTOBUF_CONSTEXPR DetectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectionRequest(const DetectionRequest& from);
  DetectionRequest(DetectionRequest&& from) noexcept
    : DetectionRequest() {
    *this = ::std::move(from);
  }

  inline DetectionRequest& operator=(const DetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionRequest& operator=(DetectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionRequest* internal_default_instance() {
    return reinterpret_cast<const DetectionRequest*>(
               &_DetectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectionRequest& a, DetectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectionRequest& from) {
    DetectionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.feature_extract.DetectionRequest";
  }
  protected:
  explicit DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .com.sekirocc.common.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::com::sekirocc::common::Image& image() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::Image* release_image();
  ::com::sekirocc::common::Image* mutable_image();
  void set_allocated_image(::com::sekirocc::common::Image* image);
  private:
  const ::com::sekirocc::common::Image& _internal_image() const;
  ::com::sekirocc::common::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::com::sekirocc::common::Image* image);
  ::com::sekirocc::common::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:com.sekirocc.feature_extract.DetectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::common::Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextract_2eproto;
};
// -------------------------------------------------------------------

class DetectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.feature_extract.DetectionResponse) */ {
 public:
  inline DetectionResponse() : DetectionResponse(nullptr) {}
  ~DetectionResponse() override;
  explicit PROTOBUF_CONSTEXPR DetectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectionResponse(const DetectionResponse& from);
  DetectionResponse(DetectionResponse&& from) noexcept
    : DetectionResponse() {
    *this = ::std::move(from);
  }

  inline DetectionResponse& operator=(const DetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionResponse& operator=(DetectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionResponse* internal_default_instance() {
    return reinterpret_cast<const DetectionResponse*>(
               &_DetectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectionResponse& a, DetectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectionResponse& from) {
    DetectionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.feature_extract.DetectionResponse";
  }
  protected:
  explicit DetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceRectsFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
  int face_rects_size() const;
  private:
  int _internal_face_rects_size() const;
  public:
  void clear_face_rects();
  ::com::sekirocc::common::FaceRectangle* mutable_face_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >*
      mutable_face_rects();
  private:
  const ::com::sekirocc::common::FaceRectangle& _internal_face_rects(int index) const;
  ::com::sekirocc::common::FaceRectangle* _internal_add_face_rects();
  public:
  const ::com::sekirocc::common::FaceRectangle& face_rects(int index) const;
  ::com::sekirocc::common::FaceRectangle* add_face_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >&
      face_rects() const;

  // .com.sekirocc.common.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::common::ResultCode code() const;
  void set_code(::com::sekirocc::common::ResultCode value);
  private:
  ::com::sekirocc::common::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::common::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.feature_extract.DetectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle > face_rects_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextract_2eproto;
};
// -------------------------------------------------------------------

class ExtractionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.feature_extract.ExtractionRequest) */ {
 public:
  inline ExtractionRequest() : ExtractionRequest(nullptr) {}
  ~ExtractionRequest() override;
  explicit PROTOBUF_CONSTEXPR ExtractionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractionRequest(const ExtractionRequest& from);
  ExtractionRequest(ExtractionRequest&& from) noexcept
    : ExtractionRequest() {
    *this = ::std::move(from);
  }

  inline ExtractionRequest& operator=(const ExtractionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractionRequest& operator=(ExtractionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractionRequest* internal_default_instance() {
    return reinterpret_cast<const ExtractionRequest*>(
               &_ExtractionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExtractionRequest& a, ExtractionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtractionRequest& from) {
    ExtractionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.feature_extract.ExtractionRequest";
  }
  protected:
  explicit ExtractionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .com.sekirocc.common.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::com::sekirocc::common::Image& image() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::Image* release_image();
  ::com::sekirocc::common::Image* mutable_image();
  void set_allocated_image(::com::sekirocc::common::Image* image);
  private:
  const ::com::sekirocc::common::Image& _internal_image() const;
  ::com::sekirocc::common::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::com::sekirocc::common::Image* image);
  ::com::sekirocc::common::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:com.sekirocc.feature_extract.ExtractionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::common::Image* image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextract_2eproto;
};
// -------------------------------------------------------------------

class ExtractionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.feature_extract.ExtractionResponse) */ {
 public:
  inline ExtractionResponse() : ExtractionResponse(nullptr) {}
  ~ExtractionResponse() override;
  explicit PROTOBUF_CONSTEXPR ExtractionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractionResponse(const ExtractionResponse& from);
  ExtractionResponse(ExtractionResponse&& from) noexcept
    : ExtractionResponse() {
    *this = ::std::move(from);
  }

  inline ExtractionResponse& operator=(const ExtractionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractionResponse& operator=(ExtractionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractionResponse* internal_default_instance() {
    return reinterpret_cast<const ExtractionResponse*>(
               &_ExtractionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtractionResponse& a, ExtractionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtractionResponse& from) {
    ExtractionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.feature_extract.ExtractionResponse";
  }
  protected:
  explicit ExtractionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceRectsFieldNumber = 2,
    kFaceFeaturesFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
  int face_rects_size() const;
  private:
  int _internal_face_rects_size() const;
  public:
  void clear_face_rects();
  ::com::sekirocc::common::FaceRectangle* mutable_face_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >*
      mutable_face_rects();
  private:
  const ::com::sekirocc::common::FaceRectangle& _internal_face_rects(int index) const;
  ::com::sekirocc::common::FaceRectangle* _internal_add_face_rects();
  public:
  const ::com::sekirocc::common::FaceRectangle& face_rects(int index) const;
  ::com::sekirocc::common::FaceRectangle* add_face_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >&
      face_rects() const;

  // repeated .com.sekirocc.common.FaceFeature face_features = 3;
  int face_features_size() const;
  private:
  int _internal_face_features_size() const;
  public:
  void clear_face_features();
  ::com::sekirocc::common::FaceFeature* mutable_face_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceFeature >*
      mutable_face_features();
  private:
  const ::com::sekirocc::common::FaceFeature& _internal_face_features(int index) const;
  ::com::sekirocc::common::FaceFeature* _internal_add_face_features();
  public:
  const ::com::sekirocc::common::FaceFeature& face_features(int index) const;
  ::com::sekirocc::common::FaceFeature* add_face_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceFeature >&
      face_features() const;

  // .com.sekirocc.common.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::common::ResultCode code() const;
  void set_code(::com::sekirocc::common::ResultCode value);
  private:
  ::com::sekirocc::common::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::common::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.feature_extract.ExtractionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle > face_rects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceFeature > face_features_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextract_2eproto;
};
// -------------------------------------------------------------------

class CompareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.feature_extract.CompareRequest) */ {
 public:
  inline CompareRequest() : CompareRequest(nullptr) {}
  ~CompareRequest() override;
  explicit PROTOBUF_CONSTEXPR CompareRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompareRequest(const CompareRequest& from);
  CompareRequest(CompareRequest&& from) noexcept
    : CompareRequest() {
    *this = ::std::move(from);
  }

  inline CompareRequest& operator=(const CompareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareRequest& operator=(CompareRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompareRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompareRequest* internal_default_instance() {
    return reinterpret_cast<const CompareRequest*>(
               &_CompareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CompareRequest& a, CompareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompareRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompareRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompareRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompareRequest& from) {
    CompareRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.feature_extract.CompareRequest";
  }
  protected:
  explicit CompareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneFieldNumber = 1,
    kTwoFieldNumber = 2,
  };
  // .com.sekirocc.common.FaceFeature one = 1;
  bool has_one() const;
  private:
  bool _internal_has_one() const;
  public:
  void clear_one();
  const ::com::sekirocc::common::FaceFeature& one() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::FaceFeature* release_one();
  ::com::sekirocc::common::FaceFeature* mutable_one();
  void set_allocated_one(::com::sekirocc::common::FaceFeature* one);
  private:
  const ::com::sekirocc::common::FaceFeature& _internal_one() const;
  ::com::sekirocc::common::FaceFeature* _internal_mutable_one();
  public:
  void unsafe_arena_set_allocated_one(
      ::com::sekirocc::common::FaceFeature* one);
  ::com::sekirocc::common::FaceFeature* unsafe_arena_release_one();

  // .com.sekirocc.common.FaceFeature two = 2;
  bool has_two() const;
  private:
  bool _internal_has_two() const;
  public:
  void clear_two();
  const ::com::sekirocc::common::FaceFeature& two() const;
  PROTOBUF_NODISCARD ::com::sekirocc::common::FaceFeature* release_two();
  ::com::sekirocc::common::FaceFeature* mutable_two();
  void set_allocated_two(::com::sekirocc::common::FaceFeature* two);
  private:
  const ::com::sekirocc::common::FaceFeature& _internal_two() const;
  ::com::sekirocc::common::FaceFeature* _internal_mutable_two();
  public:
  void unsafe_arena_set_allocated_two(
      ::com::sekirocc::common::FaceFeature* two);
  ::com::sekirocc::common::FaceFeature* unsafe_arena_release_two();

  // @@protoc_insertion_point(class_scope:com.sekirocc.feature_extract.CompareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::common::FaceFeature* one_;
    ::com::sekirocc::common::FaceFeature* two_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextract_2eproto;
};
// -------------------------------------------------------------------

class CompareResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.feature_extract.CompareResponse) */ {
 public:
  inline CompareResponse() : CompareResponse(nullptr) {}
  ~CompareResponse() override;
  explicit PROTOBUF_CONSTEXPR CompareResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompareResponse(const CompareResponse& from);
  CompareResponse(CompareResponse&& from) noexcept
    : CompareResponse() {
    *this = ::std::move(from);
  }

  inline CompareResponse& operator=(const CompareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareResponse& operator=(CompareResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompareResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompareResponse* internal_default_instance() {
    return reinterpret_cast<const CompareResponse*>(
               &_CompareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompareResponse& a, CompareResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompareResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompareResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompareResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompareResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompareResponse& from) {
    CompareResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.feature_extract.CompareResponse";
  }
  protected:
  explicit CompareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // .com.sekirocc.common.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::common::ResultCode code() const;
  void set_code(::com::sekirocc::common::ResultCode value);
  private:
  ::com::sekirocc::common::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::common::ResultCode value);
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.feature_extract.CompareResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int code_;
    float score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fextract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectionRequest

// .com.sekirocc.common.Image image = 1;
inline bool DetectionRequest::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool DetectionRequest::has_image() const {
  return _internal_has_image();
}
inline const ::com::sekirocc::common::Image& DetectionRequest::_internal_image() const {
  const ::com::sekirocc::common::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::Image&>(
      ::com::sekirocc::common::_Image_default_instance_);
}
inline const ::com::sekirocc::common::Image& DetectionRequest::image() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.DetectionRequest.image)
  return _internal_image();
}
inline void DetectionRequest::unsafe_arena_set_allocated_image(
    ::com::sekirocc::common::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.feature_extract.DetectionRequest.image)
}
inline ::com::sekirocc::common::Image* DetectionRequest::release_image() {
  
  ::com::sekirocc::common::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::Image* DetectionRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:com.sekirocc.feature_extract.DetectionRequest.image)
  
  ::com::sekirocc::common::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::Image* DetectionRequest::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::com::sekirocc::common::Image* DetectionRequest::mutable_image() {
  ::com::sekirocc::common::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.DetectionRequest.image)
  return _msg;
}
inline void DetectionRequest::set_allocated_image(::com::sekirocc::common::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.feature_extract.DetectionRequest.image)
}

// -------------------------------------------------------------------

// DetectionResponse

// .com.sekirocc.common.ResultCode code = 1;
inline void DetectionResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::common::ResultCode DetectionResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::common::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::common::ResultCode DetectionResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.DetectionResponse.code)
  return _internal_code();
}
inline void DetectionResponse::_internal_set_code(::com::sekirocc::common::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void DetectionResponse::set_code(::com::sekirocc::common::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.feature_extract.DetectionResponse.code)
}

// repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
inline int DetectionResponse::_internal_face_rects_size() const {
  return _impl_.face_rects_.size();
}
inline int DetectionResponse::face_rects_size() const {
  return _internal_face_rects_size();
}
inline ::com::sekirocc::common::FaceRectangle* DetectionResponse::mutable_face_rects(int index) {
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.DetectionResponse.face_rects)
  return _impl_.face_rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >*
DetectionResponse::mutable_face_rects() {
  // @@protoc_insertion_point(field_mutable_list:com.sekirocc.feature_extract.DetectionResponse.face_rects)
  return &_impl_.face_rects_;
}
inline const ::com::sekirocc::common::FaceRectangle& DetectionResponse::_internal_face_rects(int index) const {
  return _impl_.face_rects_.Get(index);
}
inline const ::com::sekirocc::common::FaceRectangle& DetectionResponse::face_rects(int index) const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.DetectionResponse.face_rects)
  return _internal_face_rects(index);
}
inline ::com::sekirocc::common::FaceRectangle* DetectionResponse::_internal_add_face_rects() {
  return _impl_.face_rects_.Add();
}
inline ::com::sekirocc::common::FaceRectangle* DetectionResponse::add_face_rects() {
  ::com::sekirocc::common::FaceRectangle* _add = _internal_add_face_rects();
  // @@protoc_insertion_point(field_add:com.sekirocc.feature_extract.DetectionResponse.face_rects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >&
DetectionResponse::face_rects() const {
  // @@protoc_insertion_point(field_list:com.sekirocc.feature_extract.DetectionResponse.face_rects)
  return _impl_.face_rects_;
}

// -------------------------------------------------------------------

// ExtractionRequest

// .com.sekirocc.common.Image image = 1;
inline bool ExtractionRequest::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool ExtractionRequest::has_image() const {
  return _internal_has_image();
}
inline const ::com::sekirocc::common::Image& ExtractionRequest::_internal_image() const {
  const ::com::sekirocc::common::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::Image&>(
      ::com::sekirocc::common::_Image_default_instance_);
}
inline const ::com::sekirocc::common::Image& ExtractionRequest::image() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.ExtractionRequest.image)
  return _internal_image();
}
inline void ExtractionRequest::unsafe_arena_set_allocated_image(
    ::com::sekirocc::common::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.feature_extract.ExtractionRequest.image)
}
inline ::com::sekirocc::common::Image* ExtractionRequest::release_image() {
  
  ::com::sekirocc::common::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::Image* ExtractionRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:com.sekirocc.feature_extract.ExtractionRequest.image)
  
  ::com::sekirocc::common::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::Image* ExtractionRequest::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::com::sekirocc::common::Image* ExtractionRequest::mutable_image() {
  ::com::sekirocc::common::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.ExtractionRequest.image)
  return _msg;
}
inline void ExtractionRequest::set_allocated_image(::com::sekirocc::common::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.feature_extract.ExtractionRequest.image)
}

// -------------------------------------------------------------------

// ExtractionResponse

// .com.sekirocc.common.ResultCode code = 1;
inline void ExtractionResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::common::ResultCode ExtractionResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::common::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::common::ResultCode ExtractionResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.ExtractionResponse.code)
  return _internal_code();
}
inline void ExtractionResponse::_internal_set_code(::com::sekirocc::common::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void ExtractionResponse::set_code(::com::sekirocc::common::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.feature_extract.ExtractionResponse.code)
}

// repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
inline int ExtractionResponse::_internal_face_rects_size() const {
  return _impl_.face_rects_.size();
}
inline int ExtractionResponse::face_rects_size() const {
  return _internal_face_rects_size();
}
inline ::com::sekirocc::common::FaceRectangle* ExtractionResponse::mutable_face_rects(int index) {
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.ExtractionResponse.face_rects)
  return _impl_.face_rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >*
ExtractionResponse::mutable_face_rects() {
  // @@protoc_insertion_point(field_mutable_list:com.sekirocc.feature_extract.ExtractionResponse.face_rects)
  return &_impl_.face_rects_;
}
inline const ::com::sekirocc::common::FaceRectangle& ExtractionResponse::_internal_face_rects(int index) const {
  return _impl_.face_rects_.Get(index);
}
inline const ::com::sekirocc::common::FaceRectangle& ExtractionResponse::face_rects(int index) const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.ExtractionResponse.face_rects)
  return _internal_face_rects(index);
}
inline ::com::sekirocc::common::FaceRectangle* ExtractionResponse::_internal_add_face_rects() {
  return _impl_.face_rects_.Add();
}
inline ::com::sekirocc::common::FaceRectangle* ExtractionResponse::add_face_rects() {
  ::com::sekirocc::common::FaceRectangle* _add = _internal_add_face_rects();
  // @@protoc_insertion_point(field_add:com.sekirocc.feature_extract.ExtractionResponse.face_rects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceRectangle >&
ExtractionResponse::face_rects() const {
  // @@protoc_insertion_point(field_list:com.sekirocc.feature_extract.ExtractionResponse.face_rects)
  return _impl_.face_rects_;
}

// repeated .com.sekirocc.common.FaceFeature face_features = 3;
inline int ExtractionResponse::_internal_face_features_size() const {
  return _impl_.face_features_.size();
}
inline int ExtractionResponse::face_features_size() const {
  return _internal_face_features_size();
}
inline ::com::sekirocc::common::FaceFeature* ExtractionResponse::mutable_face_features(int index) {
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.ExtractionResponse.face_features)
  return _impl_.face_features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceFeature >*
ExtractionResponse::mutable_face_features() {
  // @@protoc_insertion_point(field_mutable_list:com.sekirocc.feature_extract.ExtractionResponse.face_features)
  return &_impl_.face_features_;
}
inline const ::com::sekirocc::common::FaceFeature& ExtractionResponse::_internal_face_features(int index) const {
  return _impl_.face_features_.Get(index);
}
inline const ::com::sekirocc::common::FaceFeature& ExtractionResponse::face_features(int index) const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.ExtractionResponse.face_features)
  return _internal_face_features(index);
}
inline ::com::sekirocc::common::FaceFeature* ExtractionResponse::_internal_add_face_features() {
  return _impl_.face_features_.Add();
}
inline ::com::sekirocc::common::FaceFeature* ExtractionResponse::add_face_features() {
  ::com::sekirocc::common::FaceFeature* _add = _internal_add_face_features();
  // @@protoc_insertion_point(field_add:com.sekirocc.feature_extract.ExtractionResponse.face_features)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::common::FaceFeature >&
ExtractionResponse::face_features() const {
  // @@protoc_insertion_point(field_list:com.sekirocc.feature_extract.ExtractionResponse.face_features)
  return _impl_.face_features_;
}

// -------------------------------------------------------------------

// CompareRequest

// .com.sekirocc.common.FaceFeature one = 1;
inline bool CompareRequest::_internal_has_one() const {
  return this != internal_default_instance() && _impl_.one_ != nullptr;
}
inline bool CompareRequest::has_one() const {
  return _internal_has_one();
}
inline const ::com::sekirocc::common::FaceFeature& CompareRequest::_internal_one() const {
  const ::com::sekirocc::common::FaceFeature* p = _impl_.one_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::FaceFeature&>(
      ::com::sekirocc::common::_FaceFeature_default_instance_);
}
inline const ::com::sekirocc::common::FaceFeature& CompareRequest::one() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.CompareRequest.one)
  return _internal_one();
}
inline void CompareRequest::unsafe_arena_set_allocated_one(
    ::com::sekirocc::common::FaceFeature* one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.one_);
  }
  _impl_.one_ = one;
  if (one) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.feature_extract.CompareRequest.one)
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::release_one() {
  
  ::com::sekirocc::common::FaceFeature* temp = _impl_.one_;
  _impl_.one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::unsafe_arena_release_one() {
  // @@protoc_insertion_point(field_release:com.sekirocc.feature_extract.CompareRequest.one)
  
  ::com::sekirocc::common::FaceFeature* temp = _impl_.one_;
  _impl_.one_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::_internal_mutable_one() {
  
  if (_impl_.one_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::FaceFeature>(GetArenaForAllocation());
    _impl_.one_ = p;
  }
  return _impl_.one_;
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::mutable_one() {
  ::com::sekirocc::common::FaceFeature* _msg = _internal_mutable_one();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.CompareRequest.one)
  return _msg;
}
inline void CompareRequest::set_allocated_one(::com::sekirocc::common::FaceFeature* one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.one_);
  }
  if (one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(one));
    if (message_arena != submessage_arena) {
      one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.one_ = one;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.feature_extract.CompareRequest.one)
}

// .com.sekirocc.common.FaceFeature two = 2;
inline bool CompareRequest::_internal_has_two() const {
  return this != internal_default_instance() && _impl_.two_ != nullptr;
}
inline bool CompareRequest::has_two() const {
  return _internal_has_two();
}
inline const ::com::sekirocc::common::FaceFeature& CompareRequest::_internal_two() const {
  const ::com::sekirocc::common::FaceFeature* p = _impl_.two_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::common::FaceFeature&>(
      ::com::sekirocc::common::_FaceFeature_default_instance_);
}
inline const ::com::sekirocc::common::FaceFeature& CompareRequest::two() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.CompareRequest.two)
  return _internal_two();
}
inline void CompareRequest::unsafe_arena_set_allocated_two(
    ::com::sekirocc::common::FaceFeature* two) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.two_);
  }
  _impl_.two_ = two;
  if (two) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.feature_extract.CompareRequest.two)
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::release_two() {
  
  ::com::sekirocc::common::FaceFeature* temp = _impl_.two_;
  _impl_.two_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::unsafe_arena_release_two() {
  // @@protoc_insertion_point(field_release:com.sekirocc.feature_extract.CompareRequest.two)
  
  ::com::sekirocc::common::FaceFeature* temp = _impl_.two_;
  _impl_.two_ = nullptr;
  return temp;
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::_internal_mutable_two() {
  
  if (_impl_.two_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::common::FaceFeature>(GetArenaForAllocation());
    _impl_.two_ = p;
  }
  return _impl_.two_;
}
inline ::com::sekirocc::common::FaceFeature* CompareRequest::mutable_two() {
  ::com::sekirocc::common::FaceFeature* _msg = _internal_mutable_two();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.feature_extract.CompareRequest.two)
  return _msg;
}
inline void CompareRequest::set_allocated_two(::com::sekirocc::common::FaceFeature* two) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.two_);
  }
  if (two) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(two));
    if (message_arena != submessage_arena) {
      two = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, two, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.two_ = two;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.feature_extract.CompareRequest.two)
}

// -------------------------------------------------------------------

// CompareResponse

// .com.sekirocc.common.ResultCode code = 1;
inline void CompareResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::common::ResultCode CompareResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::common::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::common::ResultCode CompareResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.CompareResponse.code)
  return _internal_code();
}
inline void CompareResponse::_internal_set_code(::com::sekirocc::common::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void CompareResponse::set_code(::com::sekirocc::common::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.feature_extract.CompareResponse.code)
}

// float score = 2;
inline void CompareResponse::clear_score() {
  _impl_.score_ = 0;
}
inline float CompareResponse::_internal_score() const {
  return _impl_.score_;
}
inline float CompareResponse::score() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.feature_extract.CompareResponse.score)
  return _internal_score();
}
inline void CompareResponse::_internal_set_score(float value) {
  
  _impl_.score_ = value;
}
inline void CompareResponse::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.feature_extract.CompareResponse.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feature_extract
}  // namespace sekirocc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_feature_5fextract_2eproto
